# Day 12: Zero-Downtime Deployment with Terraform 

## Participant Details

- **Name:**Rajiya Shaik
- **Task Completed:**
Reading: Completed Chapter 5 (Pages 169-189)
Section: "Zero-Downtime Deployment Techniques".

Udemy Videos: -section 9 videos
Activity:
Implement zero-downtime deployment strategies with Terraform
## Changes made to implement Zero-Dowmtime deployment 
## expose the AMI as an input variable in modules/services/webservercluster/variables.tf
```hcl
variable "ami" {
description = "The AMI to run in the cluster"
type = string
default = "ami-0fb653ca2d3203ac1"
}

variable "server_text" {
description = "The text the web server should return"
type = string
default = "Hello, World"
}

```
## update the Bashscript to use this server_text     variable in the h1 tag in modules/services/webserver-cluster/user-data.sh 
```hcl
#!/bin/bash
cat > index.html <<EOF
<h1>${server_text}</h1>
<p>DB address: ${db_address}</p>
<p>DB port: ${db_port}</p>
EOF
nohup busybox httpd -f -p ${server_port} &
```
## In modules/services/webserver-cluster/main.tf
-update the image_id parameter to use var.ami, and update the templatefile call in
the user_data parameter to pass in var.server_text
and also updated aws_autoscaling_group resource

```hcl
resource "aws_launch_configuration" "example" {
image_id = var.ami
instance_type = var.instance_type
security_groups = [aws_security_group.instance.id]

user_data = templatefile("${path.module}/user-data.sh", {
server_port = var.server_port
db_address = data.terraform_remote_state.db.outputs.address
db_port = data.terraform_remote_state.db.outputs.port
server_text = var.server_text
})

# Required when using a launch configuration with an auto scaling group.
lifecycle {
create_before_destroy = true
}
}

resource "aws_autoscaling_group" "example" {
# Explicitly depend on the launch configuration's name so each time it's
# replaced, this ASG is also replaced
 name = "${var.cluster_name}-${aws_launch_configuration.example.name}"
 launch_configuration = aws_launch_configuration.example.name
 vpc_zone_identifier = data.aws_subnets.default.ids
 target_group_arns = [aws_lb_target_group.asg.arn]
 health_check_type = "ELB"
 min_size = var.min_size
 max_size = var.max_size

# Wait for at least this many instances to pass health checks before
# considering the ASG deployment complete
min_elb_capacity = var.min_size
# When replacing this ASG, create the replacement first, and only delete the
# original after

lifecycle {
create_before_destroy = true
}
tag {
key = "Name"
value = var.cluster_name
propagate_at_launch = true
}
dynamic "tag" {
for_each = {
for key, value in var.custom_tags:
key => upper(value)
if key != "Name"
}
content {
key = tag.key
value = tag.value
propagate_at_launch = true
}
}
}
```
## in live/stage/services/webserver-cluster/main.tf, 
-set the new ami and server_text parameters
```hcl
module "webserver_cluster" {
 source = "../../../../modules/services/webserver-cluster"
 ami = "ami-0fb653ca2d3203ac1"
 server_text = "New server text"
 cluster_name = "webservers-stage"
 db_remote_state_bucket = "(YOUR_BUCKET_NAME)"
 db_remote_state_key = "stage/data-stores/mysql/terraform.tfstate"
 instance_type = "t2.micro"
 min_size = 2
 max_size = 2
 enable_autoscaling = false
}
```

